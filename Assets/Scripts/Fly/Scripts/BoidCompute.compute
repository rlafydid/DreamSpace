#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Boid {
    float3 position;
    float3 direction;

    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;
    int numFlockmates;

    float speed;
    int countInFrontCone;
    float sumUnitSpeedInFrontCone;
    float3 toTargetDirection;
};

RWStructuredBuffer<Boid> boids;
int numBoids;
float viewRadius;
float avoidRadius;

float AngleInDegrees(float3 vectorA, float3 vectorB)
{
    float angleInRadians = acos(dot(normalize(vectorA), normalize(vectorB)));
    float angleInDegrees = angleInRadians * (180 / 3.1415926);
    return angleInDegrees;
}

bool IsTargetInCone(float3 coneCenter, float3 coneDirection, float coneRadius, float coneAngle, float3 targetPosition)
{
    // 计算目标到圆锥中心的距离
    float distanceToTarget = distance(coneCenter, targetPosition);
        
    //首先检查目标是否在半径范围内
    if (distanceToTarget > coneRadius)
    {
        return false;
    }

    // 计算从圆锥中心指向目标的方向
    float3 directionToTarget = normalize(targetPosition - coneCenter);
    
    // 计算圆锥中心方向和目标方向之间的夹角
    float angleBetweenDirections = AngleInDegrees(coneDirection, directionToTarget);
    
    // 如果两个方向间的夹角小于或等于圆锥顶角除以2，则目标在圆锥体范围内
    return angleBetweenDirections <= coneAngle / 2;
}

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int indexB = 0; indexB < numBoids; indexB ++) {
        if (id.x != indexB) {
            Boid boidB = boids[indexB];
            float3 offset = boidB.position - boids[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            if (sqrDst < viewRadius * viewRadius) {
                boids[id.x].numFlockmates += 1;
                boids[id.x].flockHeading += boidB.direction;
                boids[id.x].flockCentre += boidB.position;

                if (sqrDst < avoidRadius * avoidRadius) {
                    boids[id.x].separationHeading -= offset / sqrDst;
                }
            }

            if(IsTargetInCone(boids[id.x].position, boids[id.x].toTargetDirection, 1.5f,140, boidB.position))
            {
                boids[id.x].countInFrontCone += 1;
                boids[id.x].sumUnitSpeedInFrontCone += boidB.speed;
            }
        }
    }
}




